# -*- coding: utf-8 -*-
"""ANZ Modeling

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k-Ld--lqBZ8qmU7bd4zyrPTeIcvzPTkd
"""

import pandas as pd
import numpy as np
import xlrd
import seaborn as sns
import matplotlib.pyplot as plt

from google.colab import files
uploaded = files.upload()

df=pd.read_excel('ANZ synthesised transaction dataset.xlsx')
#df.info()

df.merchant_state.value_counts()

df.drop(['bpay_biller_code','merchant_id','merchant_code','merchant_suburb','merchant_long_lat'],inplace=True,axis=1)

df.drop(['account','currency','long_lat','first_name','transaction_id','country'],inplace=True,axis=1)

df.info()

a=df[['customer_id','amount']][df['txn_description']=='PAY/SALARY'].groupby(['customer_id']).sum()

a['annual']=a['amount']*4

a.drop('amount',inplace=True,axis=1)

a.reset_index(inplace=True)

df1=pd.merge(a,df,on='customer_id',how='left')

df1.shape

df1.head()

df1.drop(['card_present_flag','merchant_state'],inplace=True,axis=1)

df1.info()

df1['month']=df1['date'].dt.month

month=pd.get_dummies(df1['month'])
month.columns=['month_8','month_9','month_10']

df1[month.columns]=month

movement=pd.get_dummies(df1['movement'])
df1[movement.columns]=movement

status=pd.get_dummies(df1['status'])

txn_des=pd.get_dummies(df['txn_description'])
df1[txn_des.columns]=txn_des

status=pd.get_dummies(df1['status'])
df1[status.columns]=status

gender=pd.get_dummies(df1['gender'])
df1[gender.columns]=gender

df1.drop(['movement','month','status','txn_description','gender'],inplace=True,axis=1)

df1.shape

df1.drop(['date','extraction'],inplace=True,axis=1)

df1.info()

sum1=df1[['customer_id','month_8','month_9','month_10','credit','debit','INTER BANK','PAY/SALARY','PAYMENT','PHONE BANK','POS','SALES-POS','authorized','posted','amount']]
notadd=df1[['customer_id','annual','age','F','M']]

sum11=sum1.groupby(['customer_id']).sum()

sum11.head(1)

notadd.drop_duplicates(inplace=True)

final=pd.merge(sum11,notadd,on='customer_id')

final

final.drop(['customer_id'],inplace=True,axis=1)

target=final['annual']

target2=pd.DataFrame(target)

target2

final.drop('annual',inplace=True,axis=1)

from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import r2_score,mean_squared_error
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
#model=LinearRegression()

model=DecisionTreeRegressor()
ss=StandardScaler()
target1=ss.fit_transform(target2[['annual']])

X_train,x_test,Y_train,y_test=train_test_split(final,target1,random_state=0,test_size=0.6)

model.fit(X_train,Y_train)
y_pred=model.predict(x_test)
print(r2_score(y_pred,y_test))
print(np.log(mean_squared_error(y_pred,y_test)))

plt.figure()
plt.plot(y_test)
plt.plot(y_pred)
plt.legend()

"""**CLUSTERING**"""

from sklearn.cluster import KMeans
final223=final.copy()
final223['annual']=target2
model1=KMeans(n_clusters=3)
model1.fit(final223)
cluster1=model1.labels_
cluster1

final223['cluster']=cluster1

final223.groupby(['cluster']).sum()

"""The Cluster 2 customers have spent more money in transactions than any other cluster.

They have the annual income of 2.4 million AUD
"""

final223.groupby(['cluster']).mean()

"""The cluster 1 customers have done more average transactions than cluster 0 and cluster 2.

The cluster 1 customers have more average transaction amount compared and also have very high average income than any other cluster(1,12,489) AUD.

Hence Cluster 1 customers are to be targeted.
"""

sum11.reset_index(inplace=True)

final223['customer_id']=sum11['customer_id']

final223['customer_id'][final223['cluster']==1]

len(final223['customer_id'][final223['cluster']==1])

"""There are 19 Customers who are to be targeted for sales strategy by bank ANZ

1     CUS-1117979751
4     CUS-1196156254
10     CUS-134833760
13    CUS-1462656821
19    CUS-1617121891
27    CUS-1816693151
32    CUS-2031327464
37    CUS-2155701614
44    CUS-2376382098
48    CUS-2505971401
50     CUS-261674136
53    CUS-2663907001
56    CUS-2738291516
62    CUS-3142625864
67    CUS-3249305314
73    CUS-3336454548
84    CUS-4142663097
91     CUS-527400765
99     CUS-883482547
"""

